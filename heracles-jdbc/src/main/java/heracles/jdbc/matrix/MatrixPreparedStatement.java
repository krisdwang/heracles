package heracles.jdbc.matrix;

import heracles.jdbc.common.param.ParameterContext;
import heracles.jdbc.common.param.ParameterHandler;
import heracles.jdbc.common.param.ParameterMethod;
import heracles.jdbc.common.param.SetArrayHandler;
import heracles.jdbc.common.param.SetAsciiStreamHandler;
import heracles.jdbc.common.param.SetBigDecimalHandler;
import heracles.jdbc.common.param.SetBinaryStreamHandler;
import heracles.jdbc.common.param.SetBlob1Handler;
import heracles.jdbc.common.param.SetBlob2Handler;
import heracles.jdbc.common.param.SetBlob3Handler;
import heracles.jdbc.common.param.SetBooleanHandler;
import heracles.jdbc.common.param.SetByteHandler;
import heracles.jdbc.common.param.SetBytesHandler;
import heracles.jdbc.common.param.SetCharacterStreamHandler;
import heracles.jdbc.common.param.SetClob1Handler;
import heracles.jdbc.common.param.SetClob2Handler;
import heracles.jdbc.common.param.SetClob3Handler;
import heracles.jdbc.common.param.SetDate1Handler;
import heracles.jdbc.common.param.SetDate2Handler;
import heracles.jdbc.common.param.SetDoubleHandler;
import heracles.jdbc.common.param.SetFloatHandler;
import heracles.jdbc.common.param.SetIntHandler;
import heracles.jdbc.common.param.SetLongHandler;
import heracles.jdbc.common.param.SetNCharacterStream1Handler;
import heracles.jdbc.common.param.SetNCharacterStream2Handler;
import heracles.jdbc.common.param.SetNClob1Handler;
import heracles.jdbc.common.param.SetNClob2Handler;
import heracles.jdbc.common.param.SetNClob3Handler;
import heracles.jdbc.common.param.SetNStringHandler;
import heracles.jdbc.common.param.SetNull1Handler;
import heracles.jdbc.common.param.SetNull2Handler;
import heracles.jdbc.common.param.SetObject1Handler;
import heracles.jdbc.common.param.SetObject2Handler;
import heracles.jdbc.common.param.SetObject3Handler;
import heracles.jdbc.common.param.SetRefHandler;
import heracles.jdbc.common.param.SetRowIdHandler;
import heracles.jdbc.common.param.SetSQLXMLHandler;
import heracles.jdbc.common.param.SetShortHandler;
import heracles.jdbc.common.param.SetStringHandler;
import heracles.jdbc.common.param.SetTime1Handler;
import heracles.jdbc.common.param.SetTime2Handler;
import heracles.jdbc.common.param.SetTimestamp1Handler;
import heracles.jdbc.common.param.SetTimestamp2Handler;
import heracles.jdbc.common.param.SetURLHandler;
import heracles.jdbc.common.param.SetUnicodeStreamHandler;
import heracles.jdbc.common.rs.MergeResultSet;
import heracles.jdbc.parser.common.ShardingType;
import heracles.jdbc.parser.exception.SQLParserException;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.util.Assert;

public class MatrixPreparedStatement extends MatrixStatement implements PreparedStatement {

	private static final Logger LOGGER = LoggerFactory.getLogger(MatrixStatement.class);

	private String sql;
	private int autoGeneratedKeys = -1;
	private int[] columnIndexes;
	private String[] columnNames;
	private Map<Integer, ParameterContext> parameterSettings = new TreeMap<Integer, ParameterContext>();

	private static final Map<ParameterMethod, ParameterHandler> PARAMETER_HANDLERS = new HashMap<ParameterMethod, ParameterHandler>(
			42);
	static {
		PARAMETER_HANDLERS.put(ParameterMethod.setArray, new SetArrayHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setAsciiStream, new SetAsciiStreamHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBigDecimal, new SetBigDecimalHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBinaryStream, new SetBinaryStreamHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBlob1, new SetBlob1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBlob2, new SetBlob2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBlob3, new SetBlob3Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBoolean, new SetBooleanHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setByte, new SetByteHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setBytes, new SetBytesHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setCharacterStream, new SetCharacterStreamHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setClob1, new SetClob1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setClob2, new SetClob2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setClob3, new SetClob3Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setDate1, new SetDate1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setDate2, new SetDate2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setDouble, new SetDoubleHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setFloat, new SetFloatHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setInt, new SetIntHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setLong, new SetLongHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNull1, new SetNull1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNull2, new SetNull2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setObject1, new SetObject1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setObject2, new SetObject2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setObject3, new SetObject3Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setRef, new SetRefHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setShort, new SetShortHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setString, new SetStringHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setTime1, new SetTime1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setTime2, new SetTime2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setTimestamp1, new SetTimestamp1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setTimestamp2, new SetTimestamp2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setUnicodeStream, new SetUnicodeStreamHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setURL, new SetURLHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNString, new SetNStringHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setRowId, new SetRowIdHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setSQLXML, new SetSQLXMLHandler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNCharacterStream1, new SetNCharacterStream1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNCharacterStream2, new SetNCharacterStream2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNClob1, new SetNClob1Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNClob2, new SetNClob2Handler());
		PARAMETER_HANDLERS.put(ParameterMethod.setNClob3, new SetNClob3Handler());
	}

	private void setParameters(PreparedStatement ps) throws SQLException {
		for (ParameterContext context : parameterSettings.values()) {
			PARAMETER_HANDLERS.get(context.getParameterMethod()).setParameter(ps, context.getArgs());
		}
	}

	// private void setBatchParameters(PreparedStatement ps, List<ParameterContext> batchedParameters) throws
	// SQLException {
	// for (ParameterContext context : batchedParameters) {
	// PARAMETER_HANDLERS.get(context.getParameterMethod()).setParameter(ps, context.getArgs());
	// }
	// }

	private PreparedStatement _prepareStatement(Connection connection, String sql) throws SQLException {
		PreparedStatement preparedStatement = null;
		if (getResultSetType() != -1 && getResultSetConcurrency() != -1 && getResultSetHoldability() != -1) {
			preparedStatement = connection.prepareStatement(sql, getResultSetType(), getResultSetConcurrency(),
					getResultSetHoldability());
		} else if (getResultSetType() != -1 && getResultSetConcurrency() != -1) {
			preparedStatement = connection.prepareStatement(sql, getResultSetType(), getResultSetConcurrency());
		} else if (autoGeneratedKeys != -1) {
			preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys);
		} else if (columnIndexes != null) {
			preparedStatement = connection.prepareStatement(sql, columnIndexes);
		} else if (columnNames != null) {
			preparedStatement = connection.prepareStatement(sql, columnNames);
		} else {
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
		}

		return preparedStatement;
	}

	public String getSql() {
		return sql;
	}

	public void setSql(String sql) {
		this.sql = sql;
	}

	public int getAutoGeneratedKeys() {
		return autoGeneratedKeys;
	}

	public void setAutoGeneratedKeys(int autoGeneratedKeys) {
		this.autoGeneratedKeys = autoGeneratedKeys;
	}

	public int[] getColumnIndexes() {
		return columnIndexes;
	}

	public void setColumnIndexes(int[] columnIndexes) {
		this.columnIndexes = columnIndexes;
	}

	public String[] getColumnNames() {
		return columnNames;
	}

	public void setColumnNames(String[] columnNames) {
		this.columnNames = columnNames;
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		checkClosed();
		checkParsed(sql);

		parser.eval(parameterSettings, ShardingType.DB);

		String[] dbNames = parser.getShardingDbNames();
		Assert.notEmpty(dbNames);

		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("MatrixPreparedStatement executeQuery: this sql split to " + dbNames.length);
		}

		List<ResultSet> resultSets = new ArrayList<ResultSet>();
		for (String dbName : dbNames) {
			Connection connection = null;
			try {
				connection = getConnectionWrapper().getActualConnections().get(dbName);
				if (connection == null) {
					connection = DataSourceUtils.getConnection(getConnectionWrapper().getDataSourceWrapper()
							.getDataSource(dbName));
					connection.setAutoCommit(isAutoCommit());
					getConnectionWrapper().getActualConnections().put(dbName, connection);
				}
				PreparedStatement preparedStatement = _prepareStatement(connection, sql);
				setParameters(preparedStatement);
				actualStatements.add(preparedStatement);
				ResultSet resultSet = preparedStatement.executeQuery();
				attachedResultSets.add(resultSet);
				resultSets.add(resultSet);

				if (LOGGER.isDebugEnabled()) {
					LOGGER.debug("AtomPreparedStatement executeQuery: the targetDb is [" + dbName
							+ "];  number of result rows: " + resultSet.getRow());
				}
			} catch (Exception e) {
				throw new SQLException(e);
			}
		}

		MergeResultSet mergeResultSet = mergeExecutor.merge(resultSets.toArray(new ResultSet[resultSets.size()]),
				parser.getParserResult().getStatement());

		this.moreResults = false;
		this.updateCount = -1;
		this.resultSet = new MatrixResultSet(mergeResultSet.getResultSet());
		return this.resultSet;
	}

	@Override
	public int executeUpdate() throws SQLException {
		checkClosed();
		checkParsed(sql);

		parser.eval(parameterSettings, ShardingType.DB);

		String[] dbNames = parser.getShardingDbNames();
		Assert.notEmpty(dbNames);
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug("MatrixPreparedStatement executeUpdate: this sql split to " + dbNames.length);
		}

		int affectedRows = 0;

		for (String dbName : dbNames) {
			try {
				Connection connection = getConnectionWrapper().getActualConnections().get(dbName);
				if (connection == null) {
					// connection = getConnectionWrapper().getDataSourceWrapper().getDataSource(dbName).getConnection();
					connection = DataSourceUtils.getConnection(getConnectionWrapper().getDataSourceWrapper()
							.getDataSource(dbName));
					connection.setAutoCommit(isAutoCommit());
					getConnectionWrapper().getActualConnections().put(dbName, connection);
				}
				PreparedStatement preparedStatement = _prepareStatement(connection, sql);
				setParameters(preparedStatement);
				actualStatements.add(preparedStatement);
				if (LOGGER.isDebugEnabled()) {
					LOGGER.debug("MatrixPreparedStatement executeUpdate: the targetDb is [" + dbName + "]");
				}
				affectedRows += preparedStatement.executeUpdate();
			} catch (Exception e) {
				throw new SQLException(e);
			}
		}

		this.resultSet = null;
		this.moreResults = false;
		this.updateCount = affectedRows;

		return affectedRows;
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNull1, new Object[] {
				parameterIndex, sqlType }));
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBoolean, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setByte, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setShort, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setInt, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setLong, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setFloat, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setDouble, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBigDecimal, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setString, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBytes, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setDate1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setTime1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setTimestamp1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setAsciiStream, new Object[] {
				parameterIndex, x, length }));
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setUnicodeStream, new Object[] {
				parameterIndex, x, length }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBinaryStream, new Object[] {
				parameterIndex, x, length }));
	}

	@Override
	public void clearParameters() throws SQLException {
		parameterSettings.clear();
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setObject2, new Object[] {
				parameterIndex, x, targetSqlType }));
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setObject1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public boolean execute() throws SQLException {
		checkClosed();
		checkParsed(sql);

		switch (parser.getParserResult().getType()) {
		case SELECT:
			executeQuery();
			return true;
		case DELETE:
		case INSERT:
		case UPDATE:
			executeUpdate();
			return false;
		default:
			throw new SQLParserException("MatrixPreparedStatement execute:not support this sql : " + sql
					+ ";statement type is " + parser.getParserResult().getType());
		}
	}

	@Override
	public void addBatch() throws SQLException {
		throw new UnsupportedOperationException("addBatch");
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setCharacterStream, new Object[] {
				parameterIndex, reader, length }));
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setRef, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBlob1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setClob1, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setArray, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		throw new UnsupportedOperationException("getMetaData");
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setDate2, new Object[] {
				parameterIndex, x, cal }));
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setTime2, new Object[] {
				parameterIndex, x, cal }));
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setTimestamp2, new Object[] {
				parameterIndex, x, cal }));
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNull2, new Object[] {
				parameterIndex, sqlType, typeName }));
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setURL, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setRowId, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNString, new Object[] {
				parameterIndex, value }));
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNCharacterStream2, new Object[] {
				parameterIndex, value, length }));
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNClob1, new Object[] {
				parameterIndex, value }));
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setClob3, new Object[] {
				parameterIndex, reader, length }));
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBlob3, new Object[] {
				parameterIndex, inputStream, length }));
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNClob3, new Object[] {
				parameterIndex, reader, length }));
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setSQLXML, new Object[] {
				parameterIndex, xmlObject }));
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setObject3, new Object[] {
				parameterIndex, x, targetSqlType, scaleOrLength }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setAsciiStream, new Object[] {
				parameterIndex, x, length }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBinaryStream, new Object[] {
				parameterIndex, x, length }));
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setCharacterStream, new Object[] {
				parameterIndex, reader, length }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setAsciiStream, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBinaryStream, new Object[] {
				parameterIndex, x }));
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setCharacterStream, new Object[] {
				parameterIndex, reader }));
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNCharacterStream1, new Object[] {
				parameterIndex, value }));
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setClob2, new Object[] {
				parameterIndex, reader }));
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setBlob2, new Object[] {
				parameterIndex, inputStream }));
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		parameterSettings.put(parameterIndex, new ParameterContext(ParameterMethod.setNClob2, new Object[] {
				parameterIndex, reader }));
	}
}
