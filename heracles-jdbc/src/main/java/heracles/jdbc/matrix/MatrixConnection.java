package heracles.jdbc.matrix;

import heracles.jdbc.common.exception.ExceptionUtils;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.Executor;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceUtils;

public class MatrixConnection implements Connection {

	private static final Logger LOGGER = LoggerFactory.getLogger(MatrixConnection.class);

	private MatrixDataSource dataSourceWrapper;
	private boolean closed = false;
	private boolean readOnly = false;
	private boolean autoCommit = true;
	private int transactionIsolation = -1;
	private Map<String, Connection> actualConnections = new HashMap<String, Connection>();
	private Set<Statement> attachedStatements = new HashSet<Statement>();

	public Map<String, Connection> getActualConnections() {
		return actualConnections;
	}

	public void setActualConnections(Map<String, Connection> actualConnections) {
		this.actualConnections = actualConnections;
	}

	public MatrixDataSource getDataSourceWrapper() {
		return dataSourceWrapper;
	}

	public void setDataSourceWrapper(MatrixDataSource dataSourceWrapper) {
		this.dataSourceWrapper = dataSourceWrapper;
	}

	public MatrixConnection() {
	}

	public MatrixConnection(MatrixDataSource dataSource) throws SQLException {
		this.dataSourceWrapper = dataSource;
	}

	private void checkClosed() throws SQLException {
		if (closed) {
			throw new SQLException();
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		try {
			return (T) this;
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return this.getClass().isAssignableFrom(iface);
	}

	@Override
	public PreparedStatement prepareStatement(String sql) throws SQLException {
		checkClosed();

		MatrixPreparedStatement ps = new MatrixPreparedStatement();
		ps.setAutoCommit(autoCommit);
		ps.setReadOnly(readOnly);
		ps.setSql(sql);
		ps.setConnectionWrapper(this);

		attachedStatements.add(ps);

		return ps;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		MatrixPreparedStatement ps = (MatrixPreparedStatement) prepareStatement(sql);
		ps.setAutoGeneratedKeys(autoGeneratedKeys);
		return ps;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		MatrixPreparedStatement ps = (MatrixPreparedStatement) prepareStatement(sql);
		ps.setColumnIndexes(columnIndexes);
		return ps;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		MatrixPreparedStatement ps = (MatrixPreparedStatement) prepareStatement(sql);
		ps.setColumnNames(columnNames);
		return ps;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
			throws SQLException {
		MatrixPreparedStatement ps = (MatrixPreparedStatement) prepareStatement(sql);
		ps.setResultSetType(resultSetType);
		ps.setResultSetConcurrency(resultSetConcurrency);
		return ps;
	}

	@Override
	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		MatrixPreparedStatement ps = (MatrixPreparedStatement) prepareStatement(sql, resultSetType,
				resultSetConcurrency);
		ps.setResultSetHoldability(resultSetHoldability);
		return ps;
	}

	@Override
	public Statement createStatement() throws SQLException {
		checkClosed();

		MatrixStatement statement = new MatrixStatement();
		statement.setAutoCommit(autoCommit);
		statement.setReadOnly(readOnly);
		statement.setConnectionWrapper(this);

		attachedStatements.add(statement);

		return statement;
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		MatrixStatement statement = (MatrixStatement) createStatement();
		statement.setResultSetType(resultSetType);
		statement.setResultSetConcurrency(resultSetConcurrency);
		return statement;
	}

	@Override
	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		MatrixStatement statement = (MatrixStatement) createStatement(resultSetType, resultSetConcurrency);
		statement.setResultSetHoldability(resultSetHoldability);
		return statement;
	}

	@Override
	public CallableStatement prepareCall(String sql) throws SQLException {
		throw new UnsupportedOperationException("prepareCall");
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		throw new UnsupportedOperationException("prepareCall");
	}

	@Override
	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
			int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException("prepareCall");
	}

	@Override
	public String nativeSQL(String sql) throws SQLException {
		throw new UnsupportedOperationException("nativeSQL");
	}

	@Override
	public void setAutoCommit(boolean autoCommit) throws SQLException {
		this.autoCommit = autoCommit;
	}

	@Override
	public boolean getAutoCommit() throws SQLException {
		return this.autoCommit;
	}

	@Override
	public void commit() throws SQLException {
		checkClosed();

		if (autoCommit) {
			return;
		}

		List<SQLException> sqlExceptions = new ArrayList<SQLException>();

		for (Map.Entry<String, Connection> entry : actualConnections.entrySet()) {
			try {
				entry.getValue().commit();
			} catch (SQLException e) {
				sqlExceptions.add(e);
			}
		}

		ExceptionUtils.throwSQLExceptions(LOGGER, sqlExceptions);
	}

	@Override
	public void rollback() throws SQLException {
		checkClosed();

		if (autoCommit) {
			return;
		}

		List<SQLException> sqlExceptions = new ArrayList<SQLException>();

		for (Map.Entry<String, Connection> entry : actualConnections.entrySet()) {
			try {
				entry.getValue().rollback();
			} catch (SQLException e) {
				sqlExceptions.add(e);
			}
		}

		ExceptionUtils.throwSQLExceptions(LOGGER, sqlExceptions);
	}

	@Override
	public void close() throws SQLException {
		if (closed) {
			return;
		}

		try {
			List<SQLException> sqlExceptions = new ArrayList<SQLException>();

			for (Statement stmt : attachedStatements) {
				try {
					stmt.close();
				} catch (SQLException e) {
					sqlExceptions.add(e);
				}
			}

			for (Map.Entry<String, Connection> entry : actualConnections.entrySet()) {
				DataSourceUtils.releaseConnection(entry.getValue(), getDataSourceWrapper()
						.getDataSource(entry.getKey()));
			}

			ExceptionUtils.throwSQLExceptions(LOGGER, sqlExceptions);
		} finally {
			closed = true;
			attachedStatements.clear();
			actualConnections.clear();
		}
	}

	@Override
	public boolean isClosed() throws SQLException {
		return closed;
	}

	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		checkClosed();

		Collection<DataSource> dataSources = getDataSourceWrapper().getDataSources().values();
		DataSource[] dsArray = dataSources.toArray(new DataSource[dataSources.size()]);
		int index = new Random().nextInt(1000) % dataSources.size();
		return new MatrixDatabaseMetaData(dsArray[index]);
	}

	@Override
	public void setReadOnly(boolean readOnly) throws SQLException {
		checkClosed();
		this.readOnly = readOnly;
	}

	@Override
	public boolean isReadOnly() throws SQLException {
		return readOnly;
	}

	@Override
	public void setCatalog(String catalog) throws SQLException {
		throw new UnsupportedOperationException("setCatalog");
	}

	@Override
	public String getCatalog() throws SQLException {
		throw new UnsupportedOperationException("getCatalog");
	}

	@Override
	public void setTransactionIsolation(int level) throws SQLException {
		checkClosed();
		this.transactionIsolation = level;
	}

	@Override
	public int getTransactionIsolation() throws SQLException {
		return transactionIsolation;
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {
	}

	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
		throw new UnsupportedOperationException("getTypeMap");
	}

	@Override
	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		throw new UnsupportedOperationException("setTypeMap");
	}

	@Override
	public void setHoldability(int holdability) throws SQLException {
		throw new UnsupportedOperationException("setHoldability");
	}

	@Override
	public int getHoldability() throws SQLException {
		return ResultSet.CLOSE_CURSORS_AT_COMMIT;
	}

	@Override
	public Savepoint setSavepoint() throws SQLException {
		throw new UnsupportedOperationException("setSavepoint");
	}

	@Override
	public Savepoint setSavepoint(String name) throws SQLException {
		throw new UnsupportedOperationException("setSavepoint");
	}

	@Override
	public void rollback(Savepoint savepoint) throws SQLException {
		throw new UnsupportedOperationException("rollback");
	}

	@Override
	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw new UnsupportedOperationException("releaseSavepoint");
	}

	@Override
	public Clob createClob() throws SQLException {
		throw new UnsupportedOperationException("createClob");
	}

	@Override
	public Blob createBlob() throws SQLException {
		throw new UnsupportedOperationException("createBlob");
	}

	@Override
	public NClob createNClob() throws SQLException {
		throw new UnsupportedOperationException("createNClob");
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
		throw new UnsupportedOperationException("createSQLXML");
	}

	@Override
	public boolean isValid(int timeout) throws SQLException {
		return closed;
	}

	@Override
	public void setClientInfo(String name, String value) throws SQLClientInfoException {
		throw new UnsupportedOperationException("setClientInfo");
	}

	@Override
	public void setClientInfo(Properties properties) throws SQLClientInfoException {
		throw new UnsupportedOperationException("setClientInfo");
	}

	@Override
	public String getClientInfo(String name) throws SQLException {
		throw new UnsupportedOperationException("getClientInfo");
	}

	@Override
	public Properties getClientInfo() throws SQLException {
		throw new UnsupportedOperationException("getClientInfo");
	}

	@Override
	public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		throw new UnsupportedOperationException("createArrayOf");
	}

	@Override
	public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		throw new UnsupportedOperationException("createStruct");
	}

	@Override
	public void setSchema(String schema) throws SQLException {
		throw new UnsupportedOperationException("setSchema");
	}

	@Override
	public String getSchema() throws SQLException {
		throw new UnsupportedOperationException("getSchema");
	}

	@Override
	public void abort(Executor executor) throws SQLException {
		throw new UnsupportedOperationException("abort");
	}

	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
		throw new UnsupportedOperationException("setNetworkTimeout");
	}

	@Override
	public int getNetworkTimeout() throws SQLException {
		throw new UnsupportedOperationException("getNetworkTimeout");
	}

}
